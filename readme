由于我们目前在做课题是机械臂的物体抓取，所以需要对物体进行准确的识别，参考课上讲解的深度学习的内容，我们最后选用了TensorFlow和pytorch两种方法实现yolov3进行目标检测,并进行对比。
YOLO 的全称是 You Only Look Once。它是一种基于深度卷积神经网络的目标检测器。
YOLO 仅仅使用卷积层，这种仅适用卷基层的网络我们称之为全卷积神经网络（Fully Convolutional Network）。YOLO 拥有 75 个卷积层，还有 skip connections 和 上采样 Upsampling 层。它使用步幅为 2 的卷积层对特征图进行下采样，而不是使用池化层，这有助于防止通常由池化导致的低级特征丢失。


1.TensorFlow实现yolov3
第一步：下载opencv的cv2包，因为我们做的是视频流检测，所以需要下载对应的包；
第二步：在cmd中利用pip 下载tensorflow2.3.0，为了提高计算效率我们下载的是 gpu 版本，所以同时从NVIDIA官网上下载了相应的CUDA10.1以及cudnn。
第三步：在原代码中引入cv2包，从yolov3_tf2.models中引入YoloV3, YoloV3Tiny;
第四步：使用 VideoFileClip 函数从视频中抓取图片；
第五步：用fl_image函数将原图片替换为修改后的图片，用于传递物体识别的每张抓取图片；
第六步：所有修改的剪辑图像被组合成为一个新的视频；
第七步：将识别完毕的视频导为mp4格式，并保存至文件夹；
通过以上步骤，可以得到一个较为准确的识别率，具体的识别准确定取决于训练集的大小。

2.pytorch实现yolov3
在运用pytorch进行物体识别时，主要的步骤和TensorFlow类似
主要由以下步骤组成：
1，准备数据集，我们在这里选用了jpg格式的图片并存储在指定的位置；之后需要对图片和标签进行预处理，在项目根目录下创建两个脚本文件。
其中，maketxt.py会在data/ImageSets文件夹下生成，它将图片分成了训练集，验证集和测试集，并将文件名（不带扩展名）汇总在txt文件中。
voc_label.py此脚本将在data文件夹下生成images和labels两个文件夹用于训练。
2，开始训练，根据GPU的显存大小，修改batchsize和训练图片的输入尺寸，否则图片过大会出现溢出报错；之后将训练集改成自己的标签，存储在data文件夹下；cfg文件储存着yolo模型的网络结构。yolov3共有3个yolo层，因此在网络结构中，每个yolo层的上一层卷积层都需要修改filters的值，该值的计算公式为：（classes + 5）* anchors_of_this_yolo
3，检验结果，将待检测的图片放入data\sample文件夹下，基于训练获得的weights文件夹下的best.pt模型文件，运行detect.py即可完成检测

总体来说，训练与预测过程非常简单，最终的模型效果也是非常理想。但实际上，spp网络结构是yolo中网络结构最为复杂，算量最大的模型，用于实验尚可，但基本无法用于工程实践之中.

两种方法的区别:
首先两种方法在同一训练集下的准确率基本一致。
TensorFlow 遵循“数据即是代码，代码就是数据”的理念。在 TensorFlow 中，在跑模型之前会静态的定义图形。和外界的所有联系都是通过 tf.Session 对象和 tf.Placeholder，它们都是会在模型运行被外部数据取代的张量。
在 PyTorch 中，会更动态一些：你可以随着进展定义、更改和执行节点，没有特殊的会话界面或占位符。整体来看，PyTorch 和 Python 结合的更紧凑些，多数时候会感觉更原生。
目前，TensorFlow 对于动态输入的支持比较有限，而 PyTorch 则是默认的支持动态输入。
所以，对于视频流的检测来说，pytorch要更加易于使用。

